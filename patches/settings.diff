diff --git a/packages/apps/Settings/res/values/config.xml b/packages/apps/Settings/res/values/config.xml
index 9bad6cb..715ffe8 100755
--- a/packages/apps/Settings/res/values/config.xml
+++ b/packages/apps/Settings/res/values/config.xml
@@ -41,4 +41,7 @@
     <bool name="config_show_expandedDesktop">false</bool>
 
     <!-- **** CYANOGENMOD ADDITIONS END **** -->
+    <!-- Ad-hoc network support. Some devices (unpatched bcmdhd) have broken
+         ad-hoc support and so we should hide ad-hoc network on those devices -->
+    <bool name="config_show_adhoc_network">true</bool>
 </resources>
diff --git a/packages/apps/Settings/res/values/strings.xml b/packages/apps/Settings/res/values/strings.xml
index bf5135d..c1b001e 100644
--- a/packages/apps/Settings/res/values/strings.xml
+++ b/packages/apps/Settings/res/values/strings.xml
@@ -1407,6 +1407,13 @@
     <!-- Substring of wifi status for wifi with authentication.  This version is for when the
          string is not first in the list (lowercase in english) -->
     <string name="wifi_secured_second_item">, secured with <xliff:g id="wifi_security_short">%1$s</xliff:g></string>
+    
+    <!-- Substring of status line when the network is a ad-hoc network and
+         string is listed first -->
+    <string name="wifi_adhoc_first_item">Ad-hoc network</string>
+    <!-- Substring of wifi status when the network is a ad-hoc network and
+         string is listed after a wifi_secured_* string-->
+    <string name="wifi_adhoc_second_item">\u0020(ad-hoc network)</string>
 
     <!-- Do not translate.  Concise terminology for wifi with WEP security -->
     <string name="wifi_security_short_wep">WEP</string>
diff --git a/packages/apps/Settings/src/com/android/settings/wifi/AccessPoint.java b/packages/apps/Settings/src/com/android/settings/wifi/AccessPoint.java
index 4a73543..90ba9ed 100644
--- a/packages/apps/Settings/src/com/android/settings/wifi/AccessPoint.java
+++ b/packages/apps/Settings/src/com/android/settings/wifi/AccessPoint.java
@@ -61,6 +61,7 @@ class AccessPoint extends Preference {
     String bssid;
     int security;
     int networkId;
+    int mode;
     boolean autoConnect;
     boolean wpsAvailable = false;
 
@@ -188,6 +189,7 @@ class AccessPoint extends Preference {
         bssid = config.BSSID;
         security = getSecurity(config);
         networkId = config.networkId;
+        mode = config.mode;
         autoConnect = config.autoConnect;
         mRssi = Integer.MAX_VALUE;
         mConfig = config;
@@ -201,6 +203,8 @@ class AccessPoint extends Preference {
         if (security == SECURITY_PSK)
             pskType = getPskType(result);
         networkId = -1;
+        mode = result.capabilities.contains("[IBSS]") ?
+            WifiConfiguration.Mode.ADHOC : WifiConfiguration.Mode.INFRASTRUCTURE;
         autoConnect = true;
         mRssi = result.level;
         mScanResult = result;
@@ -362,6 +366,14 @@ class AccessPoint extends Preference {
                     summary.append(context.getString(R.string.wifi_wps_available_second_item));
                 }
             }
+
+            if (mode == WifiConfiguration.Mode.ADHOC) {
+                if (summary.length() == 0) {
+                    summary.append(context.getString(R.string.wifi_adhoc_first_item));
+                } else {
+                    summary.append(context.getString(R.string.wifi_adhoc_second_item));
+                }
+            }
             setSummary(summary.toString());
         }
     }
@@ -379,5 +391,6 @@ class AccessPoint extends Preference {
         mConfig = new WifiConfiguration();
         mConfig.SSID = AccessPoint.convertToQuotedString(ssid);
         mConfig.allowedKeyManagement.set(KeyMgmt.NONE);
+        mConfig.mode = mode;
     }
 }
diff --git a/packages/apps/Settings/src/com/android/settings/wifi/WifiConfigController.java b/packages/apps/Settings/src/com/android/settings/wifi/WifiConfigController.java
index ae0a0ff..be2f22c 100644
--- a/packages/apps/Settings/src/com/android/settings/wifi/WifiConfigController.java
+++ b/packages/apps/Settings/src/com/android/settings/wifi/WifiConfigController.java
@@ -339,8 +339,10 @@ public class WifiConfigController implements TextWatcher,
         } else if (mAccessPoint.networkId == INVALID_NETWORK_ID) {
             config.SSID = AccessPoint.convertToQuotedString(
                     mAccessPoint.ssid);
+           config.mode = mAccessPoint.mode;
         } else {
             config.networkId = mAccessPoint.networkId;
+           config.mode = mAccessPoint.mode;
         }
 
         switch (mAccessPointSecurity) {
diff --git a/packages/apps/Settings/src/com/android/settings/wifi/WifiSettings.java b/packages/apps/Settings/src/com/android/settings/wifi/WifiSettings.java
index aedb79e..ab5ddc0 100644
--- a/packages/apps/Settings/src/com/android/settings/wifi/WifiSettings.java
+++ b/packages/apps/Settings/src/com/android/settings/wifi/WifiSettings.java
@@ -141,6 +141,8 @@ public class WifiSettings extends SettingsPreferenceFragment
 
     private TextView mEmptyView;
 
+    private boolean mShowAdhoc;
+
     /* Used in Wifi Setup context */
 
     // this boolean extra specifies whether to disable the Next button when not connected
@@ -402,6 +404,8 @@ public class WifiSettings extends SettingsPreferenceFragment
             registerForContextMenu(getListView());
         }
         setHasOptionsMenu(true);
+
+	mShowAdhoc = getResources().getBoolean(R.bool.config_show_adhoc_network);
     }
 
     @Override
@@ -772,9 +776,13 @@ public class WifiSettings extends SettingsPreferenceFragment
         final List<ScanResult> results = mWifiManager.getScanResults();
         if (results != null) {
             for (ScanResult result : results) {
-                // Ignore hidden and ad-hoc networks.
-                if (result.SSID == null || result.SSID.length() == 0 ||
-                        result.capabilities.contains("[IBSS]")) {
+                // Ignore hidden networks.
+                if (result.SSID == null || result.SSID.length() == 0) {
+                    continue;
+                }
+
+                // Ignore ad-hoc network on unsupported devices
+                if (result.capabilities.contains("[IBSS]") && !mShowAdhoc) {
                     continue;
                 }
 
