diff --git a/frameworks/base/wifi/java/android/net/wifi/WifiConfigStore.java b/frameworks/base/wifi/java/android/net/wifi/WifiConfigStore.java
index 4267eb2..19efaed 100644
--- a/frameworks/base/wifi/java/android/net/wifi/WifiConfigStore.java
+++ b/frameworks/base/wifi/java/android/net/wifi/WifiConfigStore.java
@@ -1156,6 +1156,32 @@ class WifiConfigStore {
                 break setVariables;
             }
 
+            // Android sometimes call this function with infrastructure
+            // configuration for ad-hoc networks (from selectNetwork),
+            // so we only set the variable if the mode is ad-hoc.
+            // (Infrastructure is default and does not have to be set.)
+            if (config.mode == WifiConfiguration.Mode.ADHOC) {
+                if (!mWifiNative.setNetworkVariable(
+                            netId,
+                            WifiConfiguration.Mode.varName,
+                            Integer.toString(config.mode))) {
+                    loge(config.SSID + ": failed to set mode: "
+                            +config.mode);
+                    break setVariables;
+                }
+
+                // Some drivers/wpa_supplicant require the frequency
+                // to be set for ad-hoc networks, even though it will
+                // not actually be used. Set it to Channel 11.
+                if (!mWifiNative.setNetworkVariable(
+                            netId,
+                            "frequency",
+                            "2462")) {
+                    loge(config.SSID + ": failed to set frequency: 2462");
+                    break setVariables;
+                }
+            }
+
             for (WifiConfiguration.EnterpriseField field
                     : config.enterpriseFields) {
                 String varName = field.varName();
@@ -1408,6 +1434,15 @@ class WifiConfigStore {
             }
         }
 
+        value = mWifiNative.getNetworkVariable(netId, WifiConfiguration.Mode.varName);
+        config.mode = WifiConfiguration.Mode.INFRASTRUCTURE;
+        if (!TextUtils.isEmpty(value)) {
+            try {
+                config.mode = Integer.parseInt(value);
+            } catch (NumberFormatException ignore) {
+            }
+        }
+
         value = mWifiNative.getNetworkVariable(netId, WifiConfiguration.wepTxKeyIdxVarName);
         config.wepTxKeyIndex = -1;
         if (!TextUtils.isEmpty(value)) {
diff --git a/frameworks/base/wifi/java/android/net/wifi/WifiConfiguration.java b/frameworks/base/wifi/java/android/net/wifi/WifiConfiguration.java
index 7ef85b9..3580970 100644
--- a/frameworks/base/wifi/java/android/net/wifi/WifiConfiguration.java
+++ b/frameworks/base/wifi/java/android/net/wifi/WifiConfiguration.java
@@ -250,6 +250,23 @@ public class WifiConfiguration implements Parcelable {
         public static final String[] strings = { "current", "disabled", "enabled" };
     }
 
+    /**
+     * Possible modes of a network configuration.
+     * @hide
+     */
+    public static class Mode {
+        private Mode() { }
+
+        /** this is an infrastructure network */
+        public static final int INFRASTRUCTURE = 0;
+        /** this is an ad-hoc network */
+        public static final int ADHOC = 1;
+
+        public static final String varName = "mode";
+
+        public static final String[] strings = { "infrastructure", "ad-hoc" };
+    }
+
     /** @hide */
     public static final int DISABLED_UNKNOWN_REASON                         = 0;
     /** @hide */
@@ -330,6 +347,12 @@ public class WifiConfiguration implements Parcelable {
     public boolean hiddenSSID;
 
     /**
+     * The mode this access point operates on (infrastructure or ad-hoc)
+     * @hide
+     */
+    public int mode;
+
+    /**
      * The set of key management protocols supported by this configuration.
      * See {@link KeyMgmt} for descriptions of the values.
      * Defaults to WPA-PSK WPA-EAP.
@@ -412,6 +435,7 @@ public class WifiConfiguration implements Parcelable {
         BSSID = null;
         priority = 0;
         hiddenSSID = false;
+	mode = Mode.INFRASTRUCTURE;
         status = WifiConfiguration.Status.DISABLED;
         disableReason = DISABLED_UNKNOWN_REASON;
         allowedKeyManagement = new BitSet();
@@ -611,6 +635,7 @@ public class WifiConfiguration implements Parcelable {
             wepTxKeyIndex = source.wepTxKeyIndex;
             priority = source.priority;
             hiddenSSID = source.hiddenSSID;
+            mode = source.mode;
             status = source.status;
             allowedKeyManagement   = (BitSet) source.allowedKeyManagement.clone();
             allowedProtocols       = (BitSet) source.allowedProtocols.clone();
@@ -641,6 +666,7 @@ public class WifiConfiguration implements Parcelable {
         dest.writeInt(wepTxKeyIndex);
         dest.writeInt(priority);
         dest.writeInt(hiddenSSID ? 1 : 0);
+        dest.writeInt(mode);
 
         writeBitSet(dest, allowedKeyManagement);
         writeBitSet(dest, allowedProtocols);
@@ -673,6 +699,7 @@ public class WifiConfiguration implements Parcelable {
                 config.wepTxKeyIndex = in.readInt();
                 config.priority = in.readInt();
                 config.hiddenSSID = in.readInt() != 0;
+                config.mode = in.readInt();
                 config.allowedKeyManagement   = readBitSet(in);
                 config.allowedProtocols       = readBitSet(in);
                 config.allowedAuthAlgorithms  = readBitSet(in);
